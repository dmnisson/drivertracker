// <auto-generated />
using System;
using DriverTracker.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DriverTracker.Migrations
{
    [DbContext(typeof(MvcDriverContext))]
    [Migration("20190330150644_AddPickupRequestEntries")]
    partial class AddPickupRequestEntries
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("DriverTracker.Models.Analysis", b =>
                {
                    b.Property<int>("AnalysisID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnalystID");

                    b.Property<int>("DriverID");

                    b.HasKey("AnalysisID");

                    b.HasIndex("AnalystID");

                    b.HasIndex("DriverID");

                    b.ToTable("Analyses");
                });

            modelBuilder.Entity("DriverTracker.Models.Analyst", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountStatus");

                    b.Property<string>("Email");

                    b.Property<string>("FareClassIntervalsString");

                    b.Property<string>("FullName");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("ReceivesSMSAlertsDriversTerminated");

                    b.Property<bool>("ReceivesSMSAlertsLongDriverWaits");

                    b.Property<bool>("ReceivesSMSAlertsNewDrivers");

                    b.Property<double>("SMSAlertDriverWaitTime");

                    b.Property<string>("SMSNumber");

                    b.Property<int>("UserID");

                    b.Property<string>("UserIDString");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("Analysts");
                });

            modelBuilder.Entity("DriverTracker.Models.AnsweredPickupRequest", b =>
                {
                    b.Property<int>("AnsweredPickupRequestID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Leg");

                    b.Property<int?>("PickupRequest");

                    b.HasKey("AnsweredPickupRequestID");

                    b.HasIndex("Leg")
                        .IsUnique();

                    b.HasIndex("PickupRequest")
                        .IsUnique();

                    b.ToTable("AnsweredPickupRequests");
                });

            modelBuilder.Entity("DriverTracker.Models.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LicenseNumber")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("UserID");

                    b.Property<string>("UserIDString");

                    b.HasKey("DriverID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DriverTracker.Models.Leg", b =>
                {
                    b.Property<int>("LegID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ArrivalTime");

                    b.Property<string>("DestinationAddress")
                        .IsRequired();

                    b.Property<decimal>("Distance");

                    b.Property<int>("DriverID");

                    b.Property<decimal>("Fare");

                    b.Property<decimal>("FuelCost");

                    b.Property<int>("NumOfPassengersAboard");

                    b.Property<int>("NumOfPassengersPickedUp");

                    b.Property<DateTime?>("PickupRequestTime");

                    b.Property<string>("StartAddress")
                        .IsRequired();

                    b.Property<DateTime>("StartTime");

                    b.HasKey("LegID");

                    b.HasIndex("DriverID");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("DriverTracker.Models.LegCoordinates", b =>
                {
                    b.Property<int>("LegID");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<decimal>("DestLatitude");

                    b.Property<decimal>("DestLongitude");

                    b.Property<decimal>("StartLatitude");

                    b.Property<decimal>("StartLongitude");

                    b.HasKey("LegID");

                    b.ToTable("LegCoordinates");
                });

            modelBuilder.Entity("DriverTracker.Models.PickupDriverAssignment", b =>
                {
                    b.Property<int>("PickupDriverAssignmentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Driver");

                    b.Property<int?>("PickupRequest");

                    b.HasKey("PickupDriverAssignmentID");

                    b.HasIndex("Driver");

                    b.HasIndex("PickupRequest")
                        .IsUnique();

                    b.ToTable("PickupDriverAssignments");
                });

            modelBuilder.Entity("DriverTracker.Models.PickupRequest", b =>
                {
                    b.Property<int>("PickupRequestID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RequestedAddress");

                    b.Property<DateTime>("RequestedTime");

                    b.HasKey("PickupRequestID");

                    b.ToTable("PickupRequests");
                });

            modelBuilder.Entity("DriverTracker.Models.Analysis", b =>
                {
                    b.HasOne("DriverTracker.Models.Analyst", "Analyst")
                        .WithMany("Analyses")
                        .HasForeignKey("AnalystID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DriverTracker.Models.Driver", "Driver")
                        .WithMany("Analyses")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DriverTracker.Models.AnsweredPickupRequest", b =>
                {
                    b.HasOne("DriverTracker.Models.Leg", "AnswerLeg")
                        .WithOne("AnsweredPickupRequest")
                        .HasForeignKey("DriverTracker.Models.AnsweredPickupRequest", "Leg");

                    b.HasOne("DriverTracker.Models.PickupRequest", "Request")
                        .WithOne("Answered")
                        .HasForeignKey("DriverTracker.Models.AnsweredPickupRequest", "PickupRequest");
                });

            modelBuilder.Entity("DriverTracker.Models.Leg", b =>
                {
                    b.HasOne("DriverTracker.Models.Driver", "Driver")
                        .WithMany("Legs")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DriverTracker.Models.LegCoordinates", b =>
                {
                    b.HasOne("DriverTracker.Models.Leg")
                        .WithOne("LegCoordinates")
                        .HasForeignKey("DriverTracker.Models.LegCoordinates", "LegID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DriverTracker.Models.PickupDriverAssignment", b =>
                {
                    b.HasOne("DriverTracker.Models.Driver", "AssignedDriver")
                        .WithMany("PickupDriverAssignments")
                        .HasForeignKey("Driver");

                    b.HasOne("DriverTracker.Models.PickupRequest", "Request")
                        .WithOne("Assigned")
                        .HasForeignKey("DriverTracker.Models.PickupDriverAssignment", "PickupRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
