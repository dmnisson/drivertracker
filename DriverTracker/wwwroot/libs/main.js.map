{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.sass","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/driver.service.ts","webpack:///./src/app/drivers/drivers.component.html","webpack:///./src/app/drivers/drivers.component.sass","webpack:///./src/app/drivers/drivers.component.ts","webpack:///./src/app/geocoding.service.ts","webpack:///./src/app/leg.service.ts","webpack:///./src/app/legs/legs.component.html","webpack:///./src/app/legs/legs.component.sass","webpack:///./src/app/legs/legs.component.ts","webpack:///./src/app/pickup-predictor.service.ts","webpack:///./src/app/pickup-predictor/pickup-predictor.component.html","webpack:///./src/app/pickup-predictor/pickup-predictor.component.scss","webpack:///./src/app/pickup-predictor/pickup-predictor.component.ts","webpack:///./src/app/predictor.service.ts","webpack:///./src/app/predictor/predictor.component.html","webpack:///./src/app/predictor/predictor.component.sass","webpack:///./src/app/predictor/predictor.component.ts","webpack:///./src/app/statistics.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { DriversComponent } from './drivers/drivers.component';\nimport { PredictorComponent } from './predictor/predictor.component';\nimport { PickupPredictorComponent } from './pickup-predictor/pickup-predictor.component';\n\nconst routes: Routes = [\n    { path: 'Drivers', component: DriversComponent },\n    { path: 'Predictor/Index/:id', component: PredictorComponent },\n    { path: 'PickupPredictor', component: PickupPredictorComponent }\n];\n\n@NgModule({\n  imports: [\n      RouterModule.forRoot(routes)\n  ],\n  exports: [\n      RouterModule\n  ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<router-outlet></router-outlet>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNhc3MifQ== */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n  title = 'drivertracker';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AppComponent } from './app.component';\nimport { DriversComponent } from './drivers/drivers.component';\nimport { LegsComponent } from './legs/legs.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { PredictorComponent } from './predictor/predictor.component';\nimport { PickupPredictorComponent } from './pickup-predictor/pickup-predictor.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DriversComponent,\n    LegsComponent,\n    PredictorComponent,\n    PickupPredictorComponent\n  ],\n  imports: [\n      BrowserModule,\n      HttpClientModule,\n      FormsModule,\n      AppRoutingModule,\n      NgbModule.forRoot()\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Driver } from './driver';\nimport { LegService } from './leg.service';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DriverService {\n  private driversUrl = '/api/driversapi';\n\n    getDrivers(): Observable<Driver[]> {\n        return this.http.get<Driver[]>(this.driversUrl);\n    }\n\n    getDriver(id: number): Observable<Driver> {\n        const url = `${this.driversUrl}/${id}`;\n        return this.http.get<Driver>(url);\n    }\n\n\n    updateDriver(driver: Driver): Observable<any> {\n        const url = `${this.driversUrl}/${driver.driverID}`;\n        return this.http.put(url, driver, httpOptions);\n    }\n\n    addDriver(driver: Driver): Observable<Driver> {\n        const url = `${this.driversUrl}/new`;\n        return this.http.post<Driver>(url, driver, httpOptions);\n    }\n\n    deleteDriver(driver: Driver | number): Observable<Driver> {\n        const id = typeof driver === 'number' ? driver : driver.driverID;\n        const url = `${this.driversUrl}/${id}`;\n        return this.http.delete<Driver>(url, httpOptions);\n    }\n\n    constructor(\n        private http: HttpClient,\n        private legService: LegService) { }\n}\n","module.exports = \"<ng-template [ngIf]=\\\"companyStatistics != null\\\">\\r\\n<h2>Statistics</h2>\\r\\n<ul>\\r\\n    <li>{{companyStatistics.numOfDrivers}} driver<ng-template [ngIf]=\\\"companyStatistics.numOfDrivers != 1\\\">s</ng-template></li>\\r\\n    <li>{{companyStatistics.pickups}} passenger pickup<ng-template [ngIf]=\\\"companyStatistics.numOfPickups != 1\\\">s</ng-template></li>\\r\\n    <li>{{companyStatistics.milesDriven}} mile<ng-template [ngIf]=\\\"companyStatistics.milesDriven != 1\\\">s</ng-template> driven</li>\\r\\n    <li *ngIf=\\\"companyStatistics.averagePickupDelay != null\\\">Average pickup delay: \\r\\n    {{companyStatistics.averagePickupDelay}} minute<ng-template [ngIf]=\\\"companyStatistics.averagePickupDela != 1\\\">s</ng-template></li>\\r\\n    <li>Total fares: ${{companyStatistics.totalFares}}</li>\\r\\n    <li>Total fuel costs: ${{companyStatistics.totalCosts}}</li>\\r\\n    <li>Net profit: ${{companyStatistics.netProfit}}</li>\\r\\n</ul>\\r\\n</ng-template>\\r\\n\\r\\n<h2>Drivers</h2>\\r\\n<form (ngSubmit)=\\\"onSubmit()\\\" #driversForm=\\\"ngForm\\\">\\r\\n    <table class=\\\"table\\\">\\r\\n        <thead>\\r\\n            <tr>\\r\\n                <th>\\r\\n                    Name\\r\\n                </th>\\r\\n                <th>\\r\\n                    License Number\\r\\n                </th>\\r\\n                <th></th>\\r\\n            </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n            <tr *ngFor=\\\"let driver of drivers\\\">\\r\\n                <td [ngSwitch]=\\\"editing\\\">\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"name\\\" required name=\\\"name_{{driver.driverID}}\\\" [(ngModel)]=\\\"driver.name\\\"\\r\\n                           *ngSwitchCase=\\\"driver.driverID\\\" />\\r\\n                    <span *ngSwitchDefault>{{driver.name}}</span>\\r\\n                </td>\\r\\n                <td [ngSwitch]=\\\"editing\\\">\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"licenseNumber\\\" required name=\\\"licenseNumber_{{driver.driverID}}\\\" [(ngModel)]=\\\"driver.licenseNumber\\\"\\r\\n                           *ngSwitchCase=\\\"driver.driverID\\\" />\\r\\n                    <span *ngSwitchDefault>{{driver.licenseNumber}}</span>\\r\\n                </td>\\r\\n                <td [ngSwitch]=\\\"editing\\\">\\r\\n                    <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" *ngSwitchCase=\\\"driver.driverID\\\">\\r\\n                        <button type=\\\"submit\\\" class=\\\"btn btn-success mr-2\\\" [disabled]=\\\"!driversForm.form.valid\\\">Save</button>\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"cancelEdit()\\\">Cancel</button>\\r\\n                    </div>\\r\\n                    <span class=\\\"btn-group\\\" role=\\\"group\\\" *ngSwitchDefault>\\r\\n                        <a class=\\\"btn btn-secondary\\\" href=\\\"/Drivers/Details/{{driver.driverID}}\\\">Details</a>\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"editClicked(driver)\\\">Edit</button>\\r\\n                        <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"showDeleteConfirm(content, driver)\\\">Delete</button>\\r\\n                        <a class=\\\"btn btn-secondary\\\" href=\\\"/Predictor/Index/{{driver.driverID}}\\\">Predictive Analytics</a>\\r\\n                    </span>\\r\\n                </td>\\r\\n            </tr>\\r\\n            <tr *ngIf=\\\"adding; else addLink\\\">\\r\\n                <td>\\r\\n                    <input class=\\\"form-control\\\" required #name />\\r\\n                </td>\\r\\n                <td>\\r\\n                    <input class=\\\"form-control\\\" required #licenseNumber />\\r\\n                </td>\\r\\n                <td>\\r\\n                    <button type=\\\"submit\\\" class=\\\"btn btn-success mr-2\\\" [disabled]=\\\"!driversForm.form.valid\\\" (click)=\\\"saveNew(name.value, licenseNumber.value); name.value=''; licenseNumber.value=''\\\">Save</button>\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"cancelAdd()\\\">Cancel</button>\\r\\n                </td>\\r\\n            </tr>\\r\\n            <ng-template #addLink>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"addNew()\\\">New Driver</button>\\r\\n            </ng-template>\\r\\n        </tbody>\\r\\n    </table>\\r\\n</form>\\r\\n<!-- delete confirm modal -->\\r\\n<ng-template #content let-modal>\\r\\n    <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\r\\n        <div class=\\\"modal-content\\\">\\r\\n            <div class=\\\"modal-header\\\">\\r\\n                <h5 class=\\\"modal-title\\\">Confirm Delete</h5>\\r\\n                <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"modal.dismiss('crossClicked')\\\">\\r\\n                    <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n                </button>\\r\\n            </div>\\r\\n            <div class=\\\"modal-body\\\">\\r\\n                <p>Are you sure you want to delete driver {{toDelete.name}}?</p>\\r\\n            </div>\\r\\n            <div class=\\\"modal-footer\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"modal.close('deleteConfirmed')\\\">Delete</button>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" (click)=\\\"modal.close('deleteCancelled')\\\">Cancel</button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJkcml2ZXJzL2RyaXZlcnMuY29tcG9uZW50LnNhc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Driver } from '../driver';\nimport { DriverService } from '../driver.service';\nimport { CompanyStatistics } from '../statistics';\nimport { StatisticsService } from '../statistics.service';\n\nconst DELETE_CONFIRMED: string = \"deleteConfirmed\";\nconst DELETE_CANCELLED: string = \"deleteCancelled\";\nconst CROSS_CLICKED: string = \"crossClicked\";\n\n@Component({\n  selector: 'app-drivers',\n  templateUrl: './drivers.component.html',\n  styleUrls: ['./drivers.component.sass']\n})\nexport class DriversComponent implements OnInit {\n\n    drivers: Driver[];\n    companyStatistics: CompanyStatistics;\n    editing: number;\n    adding: boolean;\n    toDelete: Driver;\n\n    getDrivers(): void {\n        this.driverService.getDrivers().subscribe(drivers => this.drivers = drivers);\n    }\n\n    getCompanyStatistics(): void {\n        this.statisticsService.getCompanyStatistics()\n            .subscribe(stats => this.companyStatistics = stats);\n    }\n\n    editClicked(driver: Driver): void {\n        this.cancelAdd();\n        this.editing = driver.driverID;\n    }\n    \n    cancelEdit(): void {\n        this.driverService.getDriver(this.editing).subscribe(driver => {\n            let dmem: Driver = this.drivers.find(d => d.driverID == this.editing);\n            if (dmem !== null && driver !== null) {\n                dmem.licenseNumber = driver.licenseNumber;\n                dmem.name = driver.name;\n                this.editing = 0;\n            }\n        });\n    }\n\n    addNew(): void {\n        this.cancelEdit();\n        this.adding = true;\n    }\n\n    cancelAdd(): void {\n        this.adding = false;\n    }\n\n    onSubmit(): void {\n        if (this.editing !== 0) {\n            let driver: Driver = this.drivers.find(d => d.driverID == this.editing);\n            this.driverService.updateDriver(driver).subscribe(x => this.editing = 0);\n        }\n    }\n\n    saveNew(name: string, licenseNumber: string): void {\n        name = name.trim();\n        if (!name) {return;}\n        licenseNumber = licenseNumber.trim();\n        if (!licenseNumber) {return;}\n\n        this.driverService.addDriver({name, licenseNumber} as Driver)\n            .subscribe(driver => {\n                this.drivers.push(driver);\n                this.getCompanyStatistics(); // update to reflect change\n            });\n    }\n\n    showDeleteConfirm(content, driver: Driver) {\n        this.toDelete = driver;\n        this.modalService.open(content, {ariaLabelledBy: 'deleteConfirmLabel'})\n            .result.then((result) => {\n                if (result == DELETE_CONFIRMED) {\n                    this.deleteDriver(driver);\n                }\n                else {\n                    this.cancelDelete();\n                }\n            }, (reason) => {\n                this.cancelDelete();\n            });\n    }\n\n    deleteDriver(driver: Driver) {\n        this.driverService.deleteDriver(driver).subscribe(x => {\n            var indexToDelete = this.drivers.indexOf(this.toDelete, 0);\n            this.drivers.splice(indexToDelete, 1);\n            this.toDelete = null;\n            this.getCompanyStatistics(); // update to reflect change\n        });\n    }\n\n    cancelDelete() {\n        this.toDelete = null;\n    }\n\n    constructor(private driverService: DriverService, \n        private statisticsService: StatisticsService,\n        private modalService: NgbModal) {\n        this.editing = 0;\n        this.adding = false;\n    }\n\n    ngOnInit() {\n        this.getDrivers();\n        this.getCompanyStatistics();\n    }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { LegCoordinates } from './leg-coordinates';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GeocodingService {\n    private geocodingUrl = \"/api/geocoding\";\n\n    getLegCoordinates(id: number): Observable<LegCoordinates> {\n        const url = `${this.geocodingUrl}/${id}`;\n        return this.http.get<LegCoordinates>(url, httpOptions);\n    }\n\n    getAddressCoordinates(address: string): Observable<number[]> {\n        const url = `${this.geocodingUrl}/direct/${address}`;\n        return this.http.get<number[]>(url, httpOptions);\n    }\n\n    constructor(private http: HttpClient) { }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LegService {\n\n  constructor() { }\n}\n","module.exports = \"<p>\\n  legs works!\\n</p>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsZWdzL2xlZ3MuY29tcG9uZW50LnNhc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-legs',\n  templateUrl: './legs.component.html',\n  styleUrls: ['./legs.component.sass']\n})\nexport class LegsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PickupPredictorService {\n    private analysisUrl = '/api/analysisapi';\n\n    getFareClassIntervals(): Observable<number[]> {\n        const url = `${this.analysisUrl}/fareclassintervals`;\n        return this.http.get<number[]>(url, httpOptions);\n    }\n\n    setFareClassIntervals(intervalBounds: number[]): Observable<any> {\n        const url = `${this.analysisUrl}/fareclassintervals`;\n        return this.http.put(url, intervalBounds, httpOptions);\n    }\n\n    getFareClassProbabilities(startCoords: number[], endCoords: number[], delay: number, duration: number, pickups: number, interval: number) : Observable<number[]> {\n        const url = `${this.analysisUrl}/fareclassprob/${startCoords[0]}/${startCoords[1]}/${endCoords[0]}/${endCoords[1]}/${delay}/${duration}/${pickups}/${interval}`;\n        return this.http.get<number[]>(url, httpOptions);\n    }\n\n    getPickupProbabilities(startCoords: number[], endCoords: number[], delay: number, duration: number, fare: number, interval: number): Observable<number[]> {\n        const url = `${this.analysisUrl}/pickupprob/${startCoords[0]}/${startCoords[1]}/${endCoords[0]}/${endCoords[1]}/${delay}/${duration}/${fare}/${interval}`;\n        return this.http.get<number[]>(url, httpOptions);\n    }\n\n    constructor(private http : HttpClient) { }\n}\n","module.exports = \"<h2>Pickup predictions</h2>\\n<p>\\n    Predict probability of completing given leg and collecting fares.\\n</p>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" #pickupPredictionForm=\\\"ngForm\\\">\\r\\n    <h3>Leg information</h3>\\r\\n    <div class=\\\"m-5\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"startAddress\\\">Start address</label>\\r\\n            <input type=\\\"text\\\" name=\\\"startAddress\\\" required [(ngModel)]=\\\"startAddress\\\" class=\\\"form-control\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"endAddress\\\">End address</label>\\r\\n            <input type=\\\"text\\\" name=\\\"endAddress\\\" required [(ngModel)]=\\\"endAddress\\\" class=\\\"form-control\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"pickupDelay\\\">Pickup delay (min)</label>\\r\\n            <input type=\\\"number\\\" name=\\\"pickupDelay\\\" required [(ngModel)]=\\\"delay\\\" class=\\\"form-control\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"duration\\\">Duration (min)</label>\\r\\n            <input type=\\\"number\\\" name=\\\"duration\\\" required [(ngModel)]=\\\"duration\\\" class=\\\"form-control\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"interval\\\">Interval over which to predict probabilities (min)</label>\\r\\n            <input type=\\\"number\\\" name=\\\"interval\\\" required [(ngModel)]=\\\"interval\\\" class=\\\"form-control\\\" />\\r\\n        </div>\\r\\n    </div>\\r\\n    <h3>Fare class probabilities</h3>\\r\\n    <div class=\\\"m-5\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"pickups\\\">Number of pickups</label>\\r\\n            <input type=\\\"number\\\" name=\\\"pickups\\\" [(ngModel)]=\\\"pickups\\\" class=\\\"form-control\\\" />\\r\\n        </div>\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Predict fare class probabilities</button>\\r\\n    </div>\\r\\n    <h3>Pickup probabilities</h3>\\r\\n    <div class=\\\"m-5\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"fare\\\">Fare</label>\\r\\n            <input type=\\\"number\\\" name=\\\"fare\\\" [(ngModel)]=\\\"fare\\\" class=\\\"form-control\\\" />\\r\\n        </div>\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-success\\\" (click)=\\\"predictPickupProbabilities()\\\">Predict pickup probabilities</button>\\r\\n    </div>\\r\\n</form>\\n\\n<h2>Results</h2>\\n<ng-template [ngIf]=\\\"fareClassProbabilities != null\\\">\\n    <h3>Fare class probabilities</h3>\\n    <div class=\\\"row\\\" *ngFor=\\\"let i of fareClassIndices\\\">\\n        <div class=\\\"col\\\">\\n            <p class=\\\"pl-5\\\">${{i == 0 ? 0 : fareClassIntervalBoundaries[i-1]}} to ${{fareClassIntervalBoundaries[i]}}:</p>\\n        </div>\\n        <div class=\\\"col\\\">\\n            <p class=\\\"pr-5\\\">{{fareClassProbabilities[i] * 100}}%</p>\\n        </div>\\n    </div>\\n    <div class=\\\"row\\\" *ngIf=\\\"fareClassIntervalBoundaries.length > 0\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n            <p class=\\\"pl-5\\\">${{fareClassIntervalBoundaries[fareClassIntervalBoundaries.length - 1]}}+:</p>\\r\\n        </div>\\r\\n        <div class=\\\"col\\\">\\r\\n            <p class=\\\"pr-5\\\">{{fareClassProbabilities[fareClassIntervalBoundaries.length] * 100}}%</p>\\r\\n        </div>\\r\\n    </div>\\n</ng-template>\\n<ng-template [ngIf]=\\\"pickupProbabilities != null\\\">\\r\\n    <h3>Pickup probabilities</h3>\\r\\n    <div class=\\\"row\\\" *ngFor=\\\"let i of pickupProbabilityIndices\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n            <p class=\\\"pl-5\\\" *ngIf=\\\"i == 0\\\">\\n                Probability of failure to collect:\\n            </p>\\n            <p class=\\\"pl-5\\\" *ngIf=\\\"i > 0\\\">\\r\\n                Probability of collecting {{i}} passenger<ng-template [ngIf]=\\\"i != 1\\\">s</ng-template>:\\r\\n            </p>\\r\\n        </div>\\r\\n        <div class=\\\"col\\\">\\r\\n            <p class=\\\"pr-5\\\">{{pickupProbabilities[i] * 100}}%</p>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwaWNrdXAtcHJlZGljdG9yL3BpY2t1cC1wcmVkaWN0b3IuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { PickupPredictorService } from '../pickup-predictor.service';\nimport { GeocodingService } from '../geocoding.service';\nimport { Observable, combineLatest } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-pickup-predictor',\n  templateUrl: './pickup-predictor.component.html',\n  styleUrls: ['./pickup-predictor.component.scss']\n})\nexport class PickupPredictorComponent implements OnInit {\n        constructor(private pickupPredictorService: PickupPredictorService,\n        private geocodingService: GeocodingService,\n        private aRoute: ActivatedRoute) { }\n\n    startAddress: string;\n    startCoords: number[];\n    endAddress: string;\n    endCoords: number[];\n    delay: number;\n    duration: number;\n    interval: number;\n\n    pickups: number;\n    fare: number;\n\n    fareClassProbabilities: number[];\n    pickupProbabilities: number[];\n    pickupProbabilityIndices: number[];\n\n    fareClassIntervalBoundaries: number[];\n    fareClassIndices: number[];\n\n    geocodeInputAddresses(geoDependent: ((_1: number[], _2: number[]) => Observable<any>)): Observable<any> {\n        const startCoords$ = this.geocodingService.getAddressCoordinates(this.startAddress);\n        const endCoords$ = this.geocodingService.getAddressCoordinates(this.endAddress);\n\n        return combineLatest(startCoords$, endCoords$, (startCoords, endCoords) => ({startCoords, endCoords}))\n            .pipe(switchMap(pair => {\n                this.startCoords = pair.startCoords;\n                this.endCoords = pair.endCoords;\n\n                return geoDependent(this.startCoords, this.endCoords);\n            }));\n    }\n\n    onSubmit(): void {\n        this.geocodeInputAddresses((s, e) => this.pickupPredictorService.getFareClassProbabilities(\n            s, e, this.delay, \n            this.duration, this.pickups, this.interval))\n            .subscribe(probs => this.fareClassProbabilities = probs);\n    }\n    \n    predictPickupProbabilities(): void {\n        this.geocodeInputAddresses((s, e) => this.pickupPredictorService.getPickupProbabilities(\n            s, e, this.delay, \n            this.duration, this.fare, this.interval))\n            .subscribe(probs => {\n                this.pickupProbabilities = probs;\n                this.pickupProbabilityIndices = (new Array(probs.length)).fill(0).map((x,i)=>i);\n            });\n    }\n\n    ngOnInit() {\n        this.pickupPredictorService.getFareClassIntervals()\n            .subscribe(bounds => this.fareClassIntervalBoundaries = bounds);\n        this.fareClassIndices = (new Array(this.fareClassIntervalBoundaries.length))\n            .fill(0).map((x,i)=>i);\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PredictorService {\n    private analysisUrl = '/api/analysisapi';\n\n    getRidershipProbabilities(driverID: number, delay: number, duration: number, fare: number): Observable<number[]> {\n        const url = `${this.analysisUrl}/multipickupprob/${driverID}/${delay}/${duration}/${fare}`;\n        return this.http.get<number[]>(url, httpOptions);\n    }\n\n    constructor(private http: HttpClient) { }\n}\n","module.exports = \"<h2>Ridership Prediction for Driver: {{driver.name}}</h2>\\n\\n<p>\\n    Predict how many riders are likely <em>if a pickup occurs</em>.\\n</p>\\n\\n<form (ngSubmit)=\\\"onSubmit()\\\" #riderPredictionForm=\\\"ngForm\\\">\\n    <div class=\\\"form-group\\\">\\n        <label for=\\\"delay\\\">Anticipated delay (min)</label>\\n        <input type=\\\"number\\\" name=\\\"delay\\\" required [(ngModel)]=\\\"delay\\\" class=\\\"form-control\\\" />\\n    </div>\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"duration\\\">Leg duration (min)</label>\\r\\n        <input type=\\\"number\\\" name=\\\"duration\\\" required [(ngModel)]=\\\"duration\\\" class=\\\"form-control\\\" />\\r\\n    </div>\\n    <div class=\\\"form-group\\\">\\r\\n        <label for=\\\"fare\\\">Fare ($)</label>\\r\\n        <input type=\\\"number\\\" name=\\\"fare\\\" required [(ngModel)]=\\\"fare\\\" class=\\\"form-control\\\" />\\r\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" [disabled]=\\\"!riderPredictionForm.form.valid\\\">Predict</button>\\n</form>\\n\\n<ng-template [ngIf]=\\\"ridershipProbabilities != null\\\">\\r\\n    <div class=\\\"row\\\" *ngFor=\\\"let i of ridershipProbabilityIndices\\\">\\r\\n        <div class=\\\"col\\\">\\r\\n            <p class=\\\"pl-5\\\">Probability of {{i+2}}<ng-template [ngIf]=\\\"i == 3\\\">+</ng-template> riders:</p>\\r\\n        </div>\\r\\n        <div class=\\\"col\\\">\\r\\n            <p class=\\\"pr-5\\\">{{ridershipProbabilities[i] * 100}}%</p>\\r\\n        </div>\\r\\n    </div>\\r\\n</ng-template>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcmVkaWN0b3IvcHJlZGljdG9yLmNvbXBvbmVudC5zYXNzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n\nimport { Driver } from '../driver';\nimport { PredictorService } from '../predictor.service';\nimport { DriverService } from '../driver.service';\n\n@Component({\n  selector: 'app-predictor',\n  templateUrl: './predictor.component.html',\n  styleUrls: ['./predictor.component.sass']\n})\nexport class PredictorComponent implements OnInit {\n\n    driver: Driver;\n    delay: number;\n    duration: number;\n    fare: number;\n    ridershipProbabilities: number[];\n    ridershipProbabilityIndices: number[];\n\n    getDriver(id: number): void {\n        this.driverService.getDriver(id).subscribe(driver => this.driver = driver);\n    }\n\n    onSubmit(): void {\n\n        this.predictorService.getRidershipProbabilities(this.driver.driverID, this.delay, this.duration, this.fare)\n        .subscribe(probs => this.ridershipProbabilities = probs);\n    }\n\n    constructor(private predictorService: PredictorService, \n        private driverService: DriverService,\n        private aRoute: ActivatedRoute) { \n        this.aRoute.params.subscribe(p => this.getDriver(p['id']));\n        this.ridershipProbabilityIndices = (new Array(4)).fill(0).map((x,i) => i);\n    }\n\n    ngOnInit() {\n\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { CompanyStatistics } from './statistics';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StatisticsService {\n\n    private analysisUrl = '/api/analysisapi';\n\n    getCompanyStatistics(): Observable<CompanyStatistics> {\n        const url = `${this.analysisUrl}/company`\n        return this.httpClient.get<CompanyStatistics>(url);\n    }\n\n    constructor(private httpClient: HttpClient) { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}